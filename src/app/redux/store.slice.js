import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'

import { StoreApi } from './../common/api/store.api'

// Initial localstorage
const NAME_LOCALSTORAGE = 'BOOKMARKS_STORE'
const localStorageStores = localStorage.getItem(NAME_LOCALSTORAGE)
let parsedBookmarks

if (!localStorageStores) {
  localStorage.setItem(NAME_LOCALSTORAGE, JSON.stringify([]))
  parsedBookmarks = []
} else {
  parsedBookmarks = JSON.parse(localStorageStores)
}

export const fetchAsyncStores = createAsyncThunk('stores/fetchAsyncStores', async term => {
  const response = await StoreApi.get()
  return response.data
})

// Initial state for Redux store
const initialState = {
  isAuthenticated: false,
  user: {},
  stores: [],
  isLoading: false,
  bookmarks: parsedBookmarks
}

// Create Redux state slice
const storeSlice = createSlice({
  name: 'stores',
  initialState, // Define initial state
  reducers: {
    // Define reducers
    addBookmark: (state, action) => {
      if (!state.bookmarks.find(bookmark => bookmark.id === action.payload.id)) {
        state.bookmarks = [...state.bookmarks, action.payload]

        const stringifiedStore = JSON.stringify(state.bookmarks)
        localStorage.setItem(NAME_LOCALSTORAGE, stringifiedStore)
      }
    },
    removeBookmark: (state, action) => {
      state.bookmarks = state.bookmarks.filter(item => item.id !== action.payload)

      const stringifiedStore = JSON.stringify(state.bookmarks)
      localStorage.setItem(NAME_LOCALSTORAGE, stringifiedStore)
    },
    changeAuthenticated: (state, action) => {
      state.isAuthenticated = !state.isAuthenticated
    }
  },
  extraReducers: {
    [fetchAsyncStores.pending]: state => {
      // console.log('Pending')
      return { ...state, isLoading: true }
    },
    [fetchAsyncStores.fulfilled]: (state, { payload }) => {
      // console.log('Fetched Successfully!')
      return { ...state, stores: payload.response.stores, isLoading: false }
    },
    [fetchAsyncStores.rejected]: state => {
      // console.log('Rejected!')
      return { ...state, isLoading: false }
    }
  }
})

// Export actions generated by "createSlice()":
export const { addBookmark, removeBookmark, changeAuthenticated } = storeSlice.actions

// Export reducer generated by "createSlice()":
export default storeSlice.reducer
